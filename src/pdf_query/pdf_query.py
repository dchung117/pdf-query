"""PDF Query API"""
import os
from io import BytesIO

from PyPDF2 import PdfReader
from langchain.llms.openai import OpenAI
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores.cassandra import Cassandra
from langchain.text_splitter import CharacterTextSplitter
from langchain.indexes.vectorstore import VectorStoreIndexWrapper


class PDFQueryAgent:
    """
    Agent that will handle queries about uploaded PDF.
    """
    def __init__(self, pdf: str) -> None:
        self.llm = OpenAI(openai_api_key=os.environ.get("OPENAI_API_KEY"))
        self.embeddings = OpenAIEmbeddings(openai_api_key=os.environ.get("OPENAI_API_KEY"))
        self.vector_store = Cassandra(
            embedding=self.embeddings,
            table_name="pdf_qa",
            session=None,
            keyspace=None,
        )
        self.embed_pdf(pdf)

    def embed_pdf(self, pdf: str):
        """
        Embed and insert PDF documents into vector database.

        Args
        ----
            pdf: str
                PDF to embed in vector db.
        Returns
        -------
            None
        """
        text_splitter = CharacterTextSplitter(
            separator="\n",
            chunk_size=800,
            chunk_overlap=200,
            length_function=len
        )

        documents = text_splitter.split_text(pdf)

        self.vector_store.add_texts(documents)
        self.vector_index = VectorStoreIndexWrapper(vectorstore=self.vector_store)

    def get_answer(self, question: str) -> tuple[str, str]:
        """
        Answer user question from PDF.

        Args
        ----
            question: str
                Question asked
        Returns
        -------
            tuple[str, str]:
                Answer generated by LLM, referencing PDF document.
        """
        answer = self.vector_index.query(question, llm=self.llm).strip()
        doc = self.vector_store.similarity_search_with_score(question, k=1)[0]
        return answer, doc
def read_pdf(pdf_bytes: bytes) -> PdfReader:
    """
    Get all text from PDF.

    Args
    ----
        pdf_bytes: bytes
            Bytes of PDF

    Returns
    -------
        str:
            Entire text in PDF.
    """
    reader = PdfReader(BytesIO(pdf_bytes))
    return  "".join([page.extract_text() for page in reader.pages])


